/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, SimCardPool } from "@prisma/client";

export class SimCardPoolServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count<T extends Prisma.SimCardPoolCountArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimCardPoolCountArgs>
  ): Promise<number> {
    return this.prisma.simCardPool.count(args);
  }

  async simCardPools<T extends Prisma.SimCardPoolFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimCardPoolFindManyArgs>
  ): Promise<SimCardPool[]> {
    return this.prisma.simCardPool.findMany(args);
  }
  async simCardPool<T extends Prisma.SimCardPoolFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimCardPoolFindUniqueArgs>
  ): Promise<SimCardPool | null> {
    return this.prisma.simCardPool.findUnique(args);
  }
  async createSimCardPool<T extends Prisma.SimCardPoolCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimCardPoolCreateArgs>
  ): Promise<SimCardPool> {
    return this.prisma.simCardPool.create<T>(args);
  }
  async updateSimCardPool<T extends Prisma.SimCardPoolUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimCardPoolUpdateArgs>
  ): Promise<SimCardPool> {
    return this.prisma.simCardPool.update<T>(args);
  }
  async deleteSimCardPool<T extends Prisma.SimCardPoolDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.SimCardPoolDeleteArgs>
  ): Promise<SimCardPool> {
    return this.prisma.simCardPool.delete(args);
  }
}
