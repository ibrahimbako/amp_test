/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { SimCardPool } from "./SimCardPool";
import { SimCardPoolCountArgs } from "./SimCardPoolCountArgs";
import { SimCardPoolFindManyArgs } from "./SimCardPoolFindManyArgs";
import { SimCardPoolFindUniqueArgs } from "./SimCardPoolFindUniqueArgs";
import { CreateSimCardPoolArgs } from "./CreateSimCardPoolArgs";
import { UpdateSimCardPoolArgs } from "./UpdateSimCardPoolArgs";
import { DeleteSimCardPoolArgs } from "./DeleteSimCardPoolArgs";
import { SimCardPoolService } from "../simCardPool.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => SimCardPool)
export class SimCardPoolResolverBase {
  constructor(
    protected readonly service: SimCardPoolService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "SimCardPool",
    action: "read",
    possession: "any",
  })
  async _simCardPoolsMeta(
    @graphql.Args() args: SimCardPoolCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [SimCardPool])
  @nestAccessControl.UseRoles({
    resource: "SimCardPool",
    action: "read",
    possession: "any",
  })
  async simCardPools(
    @graphql.Args() args: SimCardPoolFindManyArgs
  ): Promise<SimCardPool[]> {
    return this.service.simCardPools(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => SimCardPool, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "SimCardPool",
    action: "read",
    possession: "own",
  })
  async simCardPool(
    @graphql.Args() args: SimCardPoolFindUniqueArgs
  ): Promise<SimCardPool | null> {
    const result = await this.service.simCardPool(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SimCardPool)
  @nestAccessControl.UseRoles({
    resource: "SimCardPool",
    action: "create",
    possession: "any",
  })
  async createSimCardPool(
    @graphql.Args() args: CreateSimCardPoolArgs
  ): Promise<SimCardPool> {
    return await this.service.createSimCardPool({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => SimCardPool)
  @nestAccessControl.UseRoles({
    resource: "SimCardPool",
    action: "update",
    possession: "any",
  })
  async updateSimCardPool(
    @graphql.Args() args: UpdateSimCardPoolArgs
  ): Promise<SimCardPool | null> {
    try {
      return await this.service.updateSimCardPool({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => SimCardPool)
  @nestAccessControl.UseRoles({
    resource: "SimCardPool",
    action: "delete",
    possession: "any",
  })
  async deleteSimCardPool(
    @graphql.Args() args: DeleteSimCardPoolArgs
  ): Promise<SimCardPool | null> {
    try {
      return await this.service.deleteSimCardPool(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
